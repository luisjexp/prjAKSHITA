sum(is.na( tt_incidince$wht_new_cases) )
sum(is.na( tt_incidince$wht_new_cases) )
find_first_last_non_nan(tt_incidince$wht_new_cases)
find_first_last_non_nan(tt_incidince$wht_new_cases)
mnmx = find_first_last_non_nan(tt_incidince$wht_new_cases)
mnmx
mnmx = find_first_last_non_nan(tt_incidince$mlt_new_cases)
mnmx
complete.cases(x)
complete.cases(tt_incidince$wht_new_cases)
is.nan(tt_incidince$wht_new_cases)
sum(is.nan(tt_incidince$wht_new_cases))
sum(complete.cases(tt_incidince$wht_new_cases))
sum(complete.cases(tt_incidince$wht_new_cases)) <10
get_R <- function(I) {
if sum(complete.cases(I)) > 10
{mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
}
return(R_reset)
}
find_first_last_non_nan <- function(x) {
mn = min(which(complete.cases(x)))
mx = max(which(complete.cases(x)))
mn_mx = c(mn,mx)
}
get_R <- function(I) {
if sum(complete.cases(I)) > 10
{mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
}
return(R_reset)
}
find_first_last_non_nan <- function(x) {
mn = min(which(complete.cases(x)))
mx = max(which(complete.cases(x)))
mn_mx = c(mn,mx)
}
get_R <- function(I) {
if sum(complete.cases(I)) > 10
{mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
}
return(R_reset)
}
get_R <- function(I) {
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
return(R_reset)
}
get_R <- function(I) {
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
return(R_reset)
}
get_R <- function(I) {
if (sum(complete.cases(I))>10) {
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
}
return(R_reset)
}
get_R(tt_incidince$wht_new_cases)
get_R(tt_incidince$mlt_new_cases)
get_R(tt_incidince$mlt_new_cases)
list_r_wrong_names <- apply(tt_incidince,2,get_R)
tt_r_wrong_names = as.data.frame(list_r_wrong_names)
tt_r_correct_names = set_names(tt_r_wrong_names,epiestimR_var_name_list )
get_R <- function(I) {
if (sum(complete.cases(I))>10) {
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
} else{R_reset = I}
return(R_reset)
}
get_R(tt_incidince$mlt_new_cases)
list_r_wrong_names <- apply(tt_incidince,2,get_R)
tt_r_wrong_names = as.data.frame(list_r_wrong_names)
tt_r_correct_names = set_names(tt_r_wrong_names,epiestimR_var_name_list )
tt_r_correct_names
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
tt_new
summary(tt_new)
tt_new$tier_status
favstats(tt_new$tier_status)
describe(tt_new$tier_status)
summary(tt_new$tier_status)
View(tt)
tt_new
summary(tt_new)
tt_new$tier_status
View(tt_new)
View(tt_r_correct_names)
incidince_var_name_list
tt_incidince <-tt %>% select(incidince_var_name_list)
tt_incidince
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
View(tt_new)
View(tt)
View(tt_r_correct_names)
View(tt_r_correct_names)
View(tt_r_wrong_names)
View(tt_r_correct_names)
rep(NA,1)
rep(NA,10)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
View(tt_r_correct_names)
View(tt_r_wrong_names)
tt
is.nan(tt)
tt_test = tt;
tt_test[is.na(tt_test)]
tt_test
tt_test
tt_test[is.na(tt_test)]
tt_test[is.na(tt_test)]
is.na(tt_test)
tt_test(is.na(tt_test))
tt_test[is.na(tt_test)]
is.na(tt_test)
tt_is_na <- is.na(tt_test)
tt_test[tt_is_na]
tt_test[tt_is_na,]
tt_test[tt_is_na,] = 0
library(data.table)
tt_test[is.na(tt_test)] <- 0
library(data.table)
tt_test
tt_test[is.na(tt_test)] <- NA
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
is.na(tt)
tt[is.na(tt)]
tt[is.na(tt)] <- 0
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
rm(tt_test)
View(tt_new)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
fname_2_import
fname_2_export
print(fname_2_import)
tt <-read_csv(fname_2_import, col_names = TRUE)
tt[is.na(tt)] <- NaN
tt
summary(tt)
race_tag_list <- list('ltn','pcf','mlt','blk','asn','wht','ntv')
incidince_var_name_list <- paste(race_tag_list, incidince_var_name_suffix, sep="_")
epiestimR_var_name_list <-paste(race_tag_list, 'epiestimR', sep="_")
epiestimR_var_name_list
incidince_var_name_list
tt_incidince <-tt %>% select(incidince_var_name_list)
tt_incidince
find_first_last_non_nan <- function(x) {
mn = min(which(complete.cases(x)))
mx = max(which(complete.cases(x)))
mn_mx = c(mn,mx)
}
get_R <- function(I) {
get_R <- function(I) {
if (sum(complete.cases(I))>10) {
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NA,mn+1),R_clipped,rep(NA,NROW(I)-mx))
} else{R_reset = I}
return(R_reset)
}
get_R(tt_incidince$mlt_new_cases)
list_r_wrong_names <- apply(tt_incidince,2,get_R)
list_r_wrong_names
list_r_wrong_names
asfasf
safas
get_R <- function(I) {
if (sum(complete.cases(I))>10) {
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NA,mn+1),R_clipped,rep(NA,NROW(I)-mx))
} else{R_reset = I}
return(R_reset)
}
get_R <- function(I) {
if (sum(complete.cases(I))>10) {
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
I_clipped = I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NA,mn+1),R_clipped,rep(NA,NROW(I)-mx))
} else{R_reset = I}
return(R_reset)
}
list_r_wrong_names <- apply(tt_incidince,2,get_R)
tt_r_wrong_names = as.data.frame(list_r_wrong_names)
tt_r_correct_names = set_names(tt_r_wrong_names,epiestimR_var_name_list )
tt_new <- cbind(tt,tt_r_correct_names )
write.csv(tt_new,fname_2_export, row.names = FALSE)
print(fname_2_export)
print('DONE PROCESSING, R ADDED TO TIME TABLE')
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/boxTEACH/tchCourses/2106 Lumiere/lumAkshita/aksANALYZE/anzDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
fname_2_export
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
data_path
data_region
fname_2import_prefix
fname_2export_prefix
incidince_var_name_suffix
data_path
fname_2import_prefix
fname_2_import
fname_2_export
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
fname_2_import
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
list_r_wrong_names
tt_r_wrong_names
list_r
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
rm(list = ls())
library(EpiEstim)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
tt_new
fname_2_import
fname_2_export
rm(list = ls())
fname_2_import
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
tt_new
fname_2_export
write.csv(tt_new,fname_2_export, row.names = FALSE)
rm(list = ls())
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
rm(list = ls())
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
tt_r_correct_names
tt
tt_new
fname_2_export
rm(list = ls())
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
find_first_last_non_nan
I
I
I(x)
I = tt_incidince
mn_mx = find_first_last_non_nan(I)
mn_mx
mn_mx
mn_mx = find_first_last_non_nan(I)
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
I = tt_incidince
mn_mx = find_first_last_non_nan(I)
mn_mx[1]
I_clipped
I
View(tt_incidince)
I = tt_incidince$wht_new_cases
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
mx = mn_mx[2]
I_clipped = I[mn:mx]
I_clipped
= I[mn:mx]
num_incidence = NROW(I_clipped)
Mean.SI = 4.46
Std.SI = 2.23
method = "parametric_si"
Mean.Prior = 1.2
Std.Prior = .2
t_start = seq(2, num_incidence-1)
t_end   = t_start + 1
R_info <- estimate_R(I_clipped,
method=method,
config = make_config(
list(t_start = t_start,
t_end = t_end,
mean_si = Mean.SI,
std_si = Std.SI))
)
R_clipped <- R_info$R$`Mean(R)`
R_reset<- c(rep(NaN,mn+1),R_clipped,rep(NaN,NROW(I)-mx))
I = tt_incidince$ntv_new_cases
source("~/Box/prjAKSHITA/aksANALYZE/EpiEstim R.R", echo=TRUE)
I
mn_mx = find_first_last_non_nan(I)
mn = mn_mx[1]
mx = mn_mx[2]
mx
mn
source("~/Box/prjAKSHITA/aksDATA/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
my.name <- readline(prompt="Enter name: ")
my.name
data_region <- readline(prompt="Enter data region(statewide or santaclara: ")
data_region
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
source("~/Box/prjAKSHITA/aksANALYZE/TT_REGION_Rgenerate.R", echo=TRUE)
